~~ See the NOTICE file distributed with this work for information
~~ regarding copyright ownership.  This file is licensed
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

Using a Web Composite

  Fabric3's webapp runtime provides an easy way for you to use SCA services from within your web application.
  This allows you to use SCA components that are local to your application, wiring them up using standard
  SCA assembly mechanisms with full support for things like composites and conversations. It also allows
  you to access services on remote systems using any of the SCA bindings.

  To set this all up, we associated a standard SCA composite with the web application itself. This composite
  is defined alongside the JavaEE web.xml in a file called <<web.composite>> and its contents are
  automatically activated by the webapp runtime when it is booted.

  An example web composite may look something like this:

+---+
<composite xmlns="http://www.osoa.org/xmlns/sca/1.0"
           xmlns:fabric3="http://fabric3.org/xmlns/sca/2.0-alpha"
           targetNamespace="urn:com.example:MyApplication" name="ExampleWebComposite">

    <component name="webapp">
        <fabric3:web/>
        <reference name="local" target="LocalService"/>
    </component>

    <component name="LocalService">
        <implementation.java class="com.example.LocalServiceImpl"/>
    </component>

    <reference name="remote" promote="webapp/remote">
        <binding.ws uri="http://example.com/ws/RemoteService"/>
    </reference>
</composite>
+---+

  This makes two services available to your web application code.
  The first is provided by the "LocalService" component that will run inside your web application.
  We've shown a simple example here but that component could be wired to others to build a complex application;
  instead of using a Java implementation, it could be an entire composite.

  The second service is defined as a reference to another system that is being accessed using web services.

  Before you can use this composite, you need to specify which components and references should be made available to your servlets.
  You do this by definining an SCA Component Type as described in the next section.

* Defining a Component Type for your application code.

  SCA provides a component type to describe the services and references that a component has. The fabric3 webapp runtime uses
  a component type file called <<web.componentType>> to determine what references to make available to your web applications
  and which Java interfaces that should implement.

  For the example above it would look like:

+---+
<componentType xmlns="http://www.osoa.org/xmlns/sca/1.0">
    <reference name="local">
        <interface.java interface="com.example.LocalService"/>
    </reference>
    <reference name="remote">
        <interface.java interface="com.example.RemoteService"/>
    </reference>
</componentType>
+---+

* Accessing SCA Services from a Servlet

  The runtime adds all of the references from the componentType as attributes in the applications ServletContext.
  You can access them directly using getAttribute() or though any method supported by your UI framework.

  For example, to access the local service defined above do something like this in your servlet code:

+---+
  private LocalService local;

  public void init(ServletConfig config) {
      super.init(config);
      ServletContext context = config.getServletContext();
      // get the "local" reference defined in the component type
      local = (LocalService) context.getAttribute("local");
  }

  protected void doGet(HttpServletRequest request, HttpServletResponse response) {
      // here you can just use the local service directly with
      // local.doSomething();
  }
+---+