~~ See the NOTICE file distributed with this work for information
~~ regarding copyright ownership.  This file is licensed
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

Mocking References

  Quite often your production component will have references to other services that will be
  provided when it is deployed. Rather than having to use live services in your test environment,
  the itest plugin can work with the <<fabric3-mock>> extension to allow these references to be
  mocked during testing. This extension allows references to be simulated using the
  {{{http://www.easymock.org/index.html}EasyMock framework}}.

  To use fabric3-mock extension, it just needs to be included in the plugin configuration.
  You also need to share the EasyMock classes

+---+
<build>
    <plugins>
        <plugin>
            <groupId>org.codehaus.fabric3</groupId>
            <artifactId>fabric3-itest-plugin</artifactId>
            <executions>
                <execution>
                    <goals>
                        <goal>test</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <extensions>
                    <dependency>
                        <groupId>org.codehaus.fabric3</groupId>
                        <artifactId>fabric3-mock</artifactId>
                    </dependency>
                </extensions>
                <shared>
                    <dependency>
                        <groupId>org.easymock</groupId>
                        <artifactId>easymock</artifactId>
                    </dependency>
                </shared>
            </configuration>
        </plugin>
    </plugins>
</build>
+---+

  To mock out a service, you need to wire to it from both the production component and your test component like this:

[images/mock.png] Wiring a mock component

  You will set up the mock in your test component as usual by recording the calls you expect the production component to make.
  Once the fixture has been set up, you switch the mock to replay mode and then invoke the production component.
  EasyMock will do it's thing, verifying the calls the production component makes to the mock and returning any results as necessary.
  Once the test call has been made, your test component can then verify the mock to ensure all the right calls were made.

  To wire this up, you just need to add the mock component into your itest composite and wire the references:

+---+
<composite xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912"
           xmlns:f3="http://fabric3.org/xmlns/sca/2.0-alpha"
           xmlns:tns="urn:com.example:MyComponent"
           targetNamespace="urn:com.example:MyComponent" name="MyTestComposite">

    <component name="MyComponent">
        <implementation.composite name="tns:MyComposite"/>
        <reference name="someReference" target="MockComponent/MockedService"/>
    </component>

    <component name="MyTestComponent">
        <f3:junit class="com.example.tests.MyIntegrationTest"/>
        <reference name="service" target="MyComponent"/>
        <reference name="mockService" target="MockComponent/MockedService"/>
    </component>

    <component name="MockComponent">
        <f3:implementation.mock>
            com.example.MockedService
        </f3:implementation.mock>
    </component>

</composite>
+---+

  The body of the <<<implementation.mock>>> element contains a list of interfaces that should be mocked.
  These will all be exposed as services by the mock component, along with the IMocksControl interface
  that is used to create them.

  The code that uses the mock would look something like this:

+---+
public class MyIntegrationTest extends TestCase {
    @Reference
    public MyService service;

    @Reference
    public MockedService mockService;

    public void testCallingComponent() {
        EasyMock.expect(mockService.getMessage()).andReturn("Hello World");
        EasyMock.replay(mockService);
        assertEquals("Hello World", service.sayHello());
        EasyMock.verify(mockService);
    }
}
+---+
  